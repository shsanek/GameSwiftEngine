/*
See LICENSE folder for this sampleâ€™s licensing information.

Abstract:
Metal shaders used for this sample
*/

#include <metal_stdlib>

using namespace metal;

// Vertex shader outputs and per-fragment inputs.  Includes clip-space position and vertex outputs
//  interpolated by rasterizer and fed to each fragment generated by clip-space primitives.
struct RasterizerData
{
    // The [[position]] attribute qualifier of this member indicates this value is the clip space
    //   position of the vertex wen this structure is returned from the vertex shader
    float4 clipSpacePosition [[position]];

    // Since this member does not have a special attribute qualifier, the rasterizer will
    //   interpolate its value with values of other vertices making up the triangle and
    //   pass that interpolated value to the fragment shader for each fragment in that triangle;
    float2 textureCoordinate;
};

// Vertex Function
vertex RasterizerData
sprite2DVertexShader(
                     uint vertexID [[ vertex_id ]],
                     constant vector_float2 *pixelArray [[ buffer(0) ]],
                     constant vector_float2 *textureArray [[ buffer(1) ]],
                     constant vector_uint2 *viewportSizePointer  [[ buffer(2) ]]
                     )

{

    RasterizerData out;

    float2 pixelSpacePosition = pixelArray[vertexID].xy;

    float2 viewportSize = float2(*viewportSizePointer);

    out.clipSpacePosition.xy = pixelSpacePosition / (viewportSize / 2.0);
    out.clipSpacePosition.z = 0.0;
    out.clipSpacePosition.w = 1.0;

    out.textureCoordinate = textureArray[vertexID];
    return out;
}

// Fragment function
fragment float4
sprite2DFragmentShader(
                       RasterizerData  in           [[stage_in]],
                       texture2d<half> colorTexture [[ texture(0) ]]
                       )
{
    constexpr sampler textureSampler (mag_filter::linear,
                                      min_filter::linear);

    // Sample the texture and return the color to colorSample
    const half4 colorSample = colorTexture.sample (textureSampler, in.textureCoordinate);
    return float4(colorSample);
}

struct FragmentShaderOut {
    float depth [[depth(any)]];
    half4 color [[color(0)]];
};

vertex RasterizerData
gridFullScreenVertexShader(
                     uint vertexID [[ vertex_id ]],
                     constant vector_float2 *coordinateArray [[ buffer(0) ]]
                     )

{

    RasterizerData out;

    out.clipSpacePosition.xy = coordinateArray[vertexID].xy;
    out.clipSpacePosition.z = 0.0;
    out.clipSpacePosition.w = 1.0;

    out.textureCoordinate = float2(coordinateArray[vertexID].x, coordinateArray[vertexID].y);
    return out;
}

float4 globalInPlanePosition(
                      float2 cord,
                      constant float4x4 *projectionMatrix,
                      constant float4x4 *inverseProjectionMatrix,
                      constant float4x4 *positionMatrix
) {
    float4 zeroDepth = (*projectionMatrix) * float4(0, 0, -5, 1);
    float4 oneDepth = (*projectionMatrix) * float4(0, 0, -50, 1);

    float4 vec1 = (*positionMatrix) * (*inverseProjectionMatrix) * float4(cord * zeroDepth.w, zeroDepth.z, zeroDepth.w);
    float4 vec2 = (*positionMatrix) * (*inverseProjectionMatrix) * float4(cord * oneDepth.w, oneDepth.z, oneDepth.w);

    if (abs(vec2.y - vec1.y) < 0.0001) {
        return float4(0, 0, 0, 0);
    }

    float t = -vec1.y / (vec2.y - vec1.y);
    float z = vec1.z + (vec2.z - vec1.z) * t;
    float x = vec1.x + (vec2.x - vec1.x) * t;

    return float4(x, 0, z, 1);
}

fragment FragmentShaderOut gridFullScreenFragmentShader(
                 RasterizerData  in           [[stage_in]],
                 constant float4x4 *projectionMatrix [[ buffer(0) ]],
                 constant float4x4 *inverseProjectionMatrix [[ buffer(1) ]],
                 constant float4x4 *positionMatrix [[ buffer(2) ]],
                 constant float4x4 *inversePositionMatrix [[ buffer(3) ]],
                 constant vector_float2 *viewportSizePointer  [[ buffer(4) ]],
                 constant float *inputScale [[ buffer(5) ]]
)
{
    FragmentShaderOut out;

    float2 textureShift = float2(2, 2) / (*viewportSizePointer);


    float4 global = globalInPlanePosition(in.textureCoordinate.xy, projectionMatrix, inverseProjectionMatrix, positionMatrix);
    float4 globalA = globalInPlanePosition(in.textureCoordinate.xy + textureShift, projectionMatrix, inverseProjectionMatrix, positionMatrix);
    float4 globalB = globalInPlanePosition(in.textureCoordinate.xy - textureShift, projectionMatrix, inverseProjectionMatrix, positionMatrix);

    if (global.w * globalA.w * globalB.w < 0.5) {
        out.depth = 1;
        out.color = half4(0.0, 0.0, 0.0, 0.0);
        return out;
    }

    float4 pixel = abs(globalA - globalB);
    float2 pixelSize = float2(pixel.x, pixel.z);

    float4 rev = (*inversePositionMatrix) * global;

    if (rev.z > 0) {
        out.depth = 1;
        out.color = half4(0.0, 0, 0, 0.0);
        return out;
    }

    rev = (*projectionMatrix) * rev;

    rev.xy = rev.xy / rev.w;


    float w = (*projectionMatrix)[3][2];
    rev.z = (rev.z + w) / rev.w;

    float scale = *inputScale;
    float n = float(floor(log2(scale)));
    float currentScale = pow(2.0, n);
    float nextScale = currentScale * 2.;

    float step1 = 0.5 / currentScale;
    float step2 = 0.5 / nextScale;
    float2 position = float2(global.x, global.z);
    float progress = (scale - currentScale) / (nextScale - currentScale);

    float resultAlpha = 0.;

    float2 line = floor(position.xy / step1) * step1;

    float2 delta = position.xy - line;
    float2 test = delta / (pixelSize);
    test = ceil(max(-test * test + 1.0, float2(0.0)));
    resultAlpha += test.x * (1.0 - progress);
    resultAlpha += test.y * (1.0 - progress);

    if (line.x == 0 && test.x > 0.01) {
        resultAlpha = ((1 - rev.z));
        out.depth = rev.z;
        out.color = half4(0, resultAlpha, 0, resultAlpha);
        return out;
    }
    if (line.y == 0 && test.y > 0.01) {
        resultAlpha = ((1 - rev.z));
        out.depth = rev.z;
        out.color = half4(resultAlpha, 0, 0, resultAlpha);
        return out;
    }

    delta = position.xy - floor(position.xy / step2) * step2;
    test = delta / (pixelSize);
    test = ceil(max(-test * test + 1.0, float2(0.0)));
    resultAlpha += test.x * progress;
    resultAlpha += test.y * progress;

    if (resultAlpha > 0.01) {
        out.depth = rev.z;
    } else {
        out.depth = 1;
    }

    resultAlpha = resultAlpha * ((1 - rev.z) * (1 - rev.z));
    out.color = half4(resultAlpha, resultAlpha, resultAlpha, resultAlpha);

    return out;
}
