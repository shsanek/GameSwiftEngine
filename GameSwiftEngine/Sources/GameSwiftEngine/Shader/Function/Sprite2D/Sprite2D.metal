/*
See LICENSE folder for this sampleâ€™s licensing information.

Abstract:
Metal shaders used for this sample
*/

#include <metal_stdlib>

using namespace metal;

// Vertex shader outputs and per-fragment inputs.  Includes clip-space position and vertex outputs
//  interpolated by rasterizer and fed to each fragment generated by clip-space primitives.
struct RasterizerData
{
    // The [[position]] attribute qualifier of this member indicates this value is the clip space
    //   position of the vertex wen this structure is returned from the vertex shader
    float4 clipSpacePosition [[position]];

    // Since this member does not have a special attribute qualifier, the rasterizer will
    //   interpolate its value with values of other vertices making up the triangle and
    //   pass that interpolated value to the fragment shader for each fragment in that triangle;
    float2 textureCoordinate;

};

// Vertex Function
vertex RasterizerData
sprite2DVertexShader(
                     uint vertexID [[ vertex_id ]],
                     constant vector_float2 *pixelArray [[ buffer(0) ]],
                     constant vector_float2 *textureArray [[ buffer(1) ]],
                     constant vector_uint2 *viewportSizePointer  [[ buffer(2) ]]
                     )

{

    RasterizerData out;

    float2 pixelSpacePosition = pixelArray[vertexID].xy;

    float2 viewportSize = float2(*viewportSizePointer);

    out.clipSpacePosition.xy = pixelSpacePosition / (viewportSize / 2.0);
    out.clipSpacePosition.z = 0.0;
    out.clipSpacePosition.w = 1.0;

    out.textureCoordinate = textureArray[vertexID];

    return out;
}

// Fragment function
fragment float4
sprite2DFragmentShader(
                       RasterizerData  in           [[stage_in]],
                       texture2d<half> colorTexture [[ texture(0) ]]
                       )
{
    constexpr sampler textureSampler (mag_filter::linear,
                                      min_filter::linear);

    // Sample the texture and return the color to colorSample
    const half4 colorSample = colorTexture.sample (textureSampler, in.textureCoordinate);
    return float4(colorSample);
}
